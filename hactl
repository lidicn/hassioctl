#!/bin/bash

HASSCTL_VERSION="1.0.1"

debug() {
  (( $DEBUG )) && echo "$(basename $0): DEBUG:" "$@"
}

info() {
  echo "$(basename $0):" "$@"
}

warn() {
  echo "$(basename $0):" "$@" >&2
}

die() {
  local rc=1
  local message=

  [[ $# -gt 1 ]] && rc=$1 && shift
  [[ ! -z "$@" ]] && warn "$@"

  exit $rc
}

usage() {
  echo "usage: $(basename $0) {help|version|start|stop|restart|kill|log|error|debug|enter|pause|unpause}" 2>&1
  exit 1
}

version() {
  echo "$HASSCTL_VERSION"
  exit 0
}

# Show usage if no arguments given
if [[ $# -lt 1 ]]; then
  usage
fi

# Report unimplemented command
no_command() {
  warn "command not yet implemented: $1"
  usage
}

# Absolute paths to executables
chmod=/bin/chmod
cp=/bin/cp
rm=/bin/rm
curl=/usr/bin/curl
systemctl=/bin/systemctl
journalctl=/bin/journalctl
tail=/usr/bin/tail
sed=/bin/sed
docker=/usr/bin/docker

# Get the current username
me="$(whoami)"

# Portable version of realpath
realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# HASSCTL_CONF can be overridden as an env var
HASSCTL_CONF="${HASSCTL_CONF:-/etc/hassctl.conf}"
HASSCTL_CONF="$(realpath "$HASSCTL_CONF")"

# Read configuration file
read_config() {


  HASS_SERVICE="homeassistant"


  return 0
}



# Execute commands for a specific user
maybe_exec_as() {
  local RUN_AS="$1"
  shift

  if [[ "$RUN_AS" != "$me" ]] && id -u "$RUN_AS" >/dev/null; then
    debug "sudo -u \"$RUN_AS\" -H \"$@\""
    sudo -u "$RUN_AS" -H "$@"
  else
    debug "\"$@\""
    "$@"
  fi
}

# Update hassctl script
update_hassctl() {
  read_config

  BRANCH="${1:-$HASSCTL_BRANCH}"
  BRANCH="${BRANCH:-master}"

  BRANCH_URL="https://raw.githubusercontent.com/lidicn/hassioctl/$BRANCH"
  HASSCTL_URL="$BRANCH_URL/hactl"


  debug "installing from $HASSCTL_URL"

  CP_OPTS="--remove-destination"

  sudo $curl -s -S -o "$HASSCTL_EXEC.update" "$HASSCTL_URL" \
    && sudo $chmod +x "$HASSCTL_EXEC.update" \
    && sudo $cp $CP_OPTS "$HASSCTL_EXEC.update" "$HASSCTL_EXEC" \
    && sudo $rm "$HASSCTL_EXEC.update"

  if [[ $? -ne 0 ]]; then
    # Clean up if something went wrong
    sudo $rm "$HASSCTL_EXEC.update"
    die "utility update failed"
  fi

  info "utility has been updated to the latest $BRANCH version"
  exit 0
}



# Run hass check_config script
check_config() {
  read_config
  maybe_exec_as "$HASS_USER" "$HASS_EXEC" --script check_config -c "$HASS_CONFIG" "$@"
}

# Show Home Assistant raw log
hass_raw_log() {
  read_config
  debug "clear && sudo $docker \"$@\" logs -f \"$HASS_SERVICE\""
  clear && sudo $docker "$@" logs -f "$HASS_SERVICE"
}

# Show Home Assistant error log
hass_error_log() {
  read_config
  debug "clear && sudo $docker \"$@\" logs \"$HASS_SERVICE\" 2>&1 | grep -iP '^  .*$|^(?!.*is_failed=)(?!.*service=remove_failed_node)(?!.*service=replace_failed_node).*(error|errno|warning|exception|failure|failed|warn|except|fail|traceback).*'"
  clear && sudo $docker "$@" logs "$HASS_SERVICE" 2>&1 | grep -iP '^  .*$|^(?!.*is_failed=)(?!.*service=remove_failed_node)(?!.*service=replace_failed_node).*(error|errno|warning|exception|failure|failed|warn|except|fail|traceback).*'
}

# Show Home Assistant debug log
hass_debug_log() {
  read_config
  debug "clear && sudo $docker \"$@\" logs \"$HASS_SERVICE\" 2>&1 | grep -iP '[0-9]{2}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} DEBUG'"
  clear && sudo $docker "$@" logs "$HASS_SERVICE" 2>&1 | grep -iP '[0-9]{2}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} DEBUG'
}

# Kill Home Assistant service
hass_kill() {
  read_config
  debug "sudo $docker kill -s \"$HASS_SERVICE\""
  sudo $docker kill -s "$HASS_SERVICE"
}


# Pass commands to Home Assistant service
systemctl_cmd() {
  read_config
  debug "sudo $docker \"$@\" \"$HASS_SERVICE\""
  sudo $docker "$@" "$HASS_SERVICE"
}

hass_enter() {
  read_config
  sudo $docker "$@" exec -it "$HASS_SERVICE" /bin/bash
}


# Process arguments
case "$1" in
  help)
    usage
    ;;

  log)
    hass_raw_log "${@:2}"
    ;;

  error)
    hass_error_log "${@:2}"
    ;;

  debug)
    hass_debug_log "${@:2}"
    ;;

  enter)
    hass_enter "${@:2}"
    ;;



  config)
    check_config "${@:2}"
    ;;

  update-hassctl)
    update_hassctl "${@:2}"
    ;;

  update-hass)
    update_hass "${@:2}"
    ;;

  backup)
    no_command "$@"
    ;;

  service)
    no_command "$@"
    ;;

  kill)
    hass_kill
    ;;



  start|stop|\
  restart|\
  stats|pause|unpause)
    systemctl_cmd "$@"
    ;;

  version)
    version
    ;;

  *)
    usage
    ;;
esac
